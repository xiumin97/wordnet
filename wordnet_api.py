# -*- coding: utf-8 -*-
"""WordNet API.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1eyaajeaxfW9NX9PtbvTkc8Ho63mUnTMY

Preparing the Dictionary of 1000 Imagenet Classes
"""

import copy

! git clone https://gist.github.com/yrevar/942d3a0ac09ec9e5eb3a '/files/imagenet_classes.txt'

with open('/files/imagenet_classes.txt/imagenet1000_clsidx_to_labels.txt', 'r') as classes:
    imagenet_classes = classes.read()

def imagenet_to_dict(imagenet_classes):
   imagenet_classes_list = list(imagenet_classes.split(",\n "))
   imagenet_classes_list=[s.strip("{") for s in imagenet_classes_list]
   imagenet_classes_list=[s.strip("}") for s in imagenet_classes_list]
    
   #return imagenet_classes_list
   for i in imagenet_classes_list:
     imagenet_classes_new=[j.split(":") for j in imagenet_classes_list]
   
   

   dict_obj = imagenet_dict()
   for j in imagenet_classes_new:
     dict_obj.add(int(j[0]), j[1])
   return dict_obj

class imagenet_dict(dict): 
  
    # __init__ function 
    def __init__(self): 
        self = dict() 
          
    # Function to add key:value 
    def add(self, key, value): 
        self[key] = value

imagenet_dictionary=imagenet_to_dict(imagenet_classes)

#imagenet_dictionary
final_imagenet_classes = [] 
for key in imagenet_dictionary.keys() : 
    final_imagenet_classes.append(imagenet_dictionary[key])

def clean_imagenet_classes(final_imagenet_classes):
  imagenet_classes_cleaned=[]
  for word in final_imagenet_classes:
    word=word.replace("\'","")
    word=word.replace('\"',"")
    word=word.strip()
    #word=word.strip("\'")
    word=word.split(',')
    
    
    imagenet_classes_cleaned.append(word)
  return imagenet_classes_cleaned

final_imagenet_classes=clean_imagenet_classes(final_imagenet_classes)

final_imagenet_classes_1000=copy.deepcopy(final_imagenet_classes)

"""Importing WordNet"""

! pip install nltk

import nltk
nltk.download('wordnet')
from nltk.corpus import wordnet as wn

def hypernym_extractor(word):
  #wn.synsets(word)[0].definition()
  word=wn.synsets(word)[0]
  hypernym = list([i for i in word.closure(lambda s:s.hypernyms())])
  return hypernym

#[str(lemma.name()) for lemma in wn.synset('pineapple.n.01').lemmas()]

count=0
  
  for word in range(1000): # Your word list
    ss = wn.synsets(final_imagenet_classes_1000[word][0])
    if ss:
        definition = ss[0].definition() 
        print("{}: {}".format(final_imagenet_classes_1000[word][0], definition))
    else:
        print("### Word {} not found".format(final_imagenet_classes_1000[word][0]))
        count=count+1
print(count,"words not found!")
#print(wn.synsets(str((final_imagenet_classes_1000[0][0]))))

"""414 words not found in the synset"""

dict_obj_new = imagenet_dict()
   #hypernym_list=[]
for num in range(1000):
  word=final_imagenet_classes_1000[num][0]
  if wn.synsets(word):
    dict_obj_new.add(word,hypernym_extractor(word))
    #hypernym_list.append(hypernym_extractor(word))

dict_obj_new

entities='organism'

def hyponym_extractor(word):
  word=wn.synsets(word)[0]
  hypoword = list([i for i in word.closure(lambda s:s.hyponyms())])
  return hypoword

hyponym_extractor(entities)

#entities='entity'
def get_common_hyponyms(word):
  objects_match=[]
  count=0
  count_total=0
  word_syn=word
  word=wn.synsets(word)[0]
  for name, age in dict_obj_new.items():
    if age:
      count_total=count_total+1
      #if word not in age:
        #print(age)
       # print("Word {}:{} not found".format(name,age))
      if word in age:
        
        #print(age)
        #if age[-1]==word:
          print("{}: {}".format(name,age))
          objects_match.append(name)
          count=count+1
      #count=count+1
      # == word:
  print("Number of words that have the hypernym",word_syn,"are",count)        
  print("Total number of valid words with non empty hypernyms are",count_total) 
  return objects_match

get_common_hyponyms("chordate")

fish_list=get_common_hyponyms("fish")

bird_list=get_common_hyponyms('bird')
reptile_list=get_common_hyponyms('reptile')
mammal_list=get_common_hyponyms('mammal')
arthropod_list=get_common_hyponyms('arthropod')
cniarian_list=get_common_hyponyms('cnidarian')

! pip install anytree

from anytree import Node, RenderTree
entity = Node("entity")
physical_entity = Node("physical entity", parent=entity)
abstraction = Node("abstraction", parent=entity)
objects = Node("object", parent=physical_entity)
thing = Node("thing", parent=physical_entity)
matter= Node("matter", parent=physical_entity)
attribute= Node("attribute", parent=abstraction)
psychological_feature= Node("psychological feature", parent=abstraction)
geological_formation=Node("geological formation",parent=objects)
living_thing=Node("living thing",parent=objects)
structure=Node("structure",parent=objects)
instrumentality=Node("instrumentality",parent=objects)
clothing=Node("clothing",parent=objects)
conveyance=Node("conveyance",parent=objects)
whole=Node("whole",parent=thing)
part=Node("part",parent=thing)
material=Node("material",parent=matter)
substance=Node("substance",parent=material)
chordate=Node("chordate",parent=living_thing)
arthropod=Node("arthropod",parent=living_thing)
cnidarian=Node("cnidarian",parent=living_thing)
reptile=Node("reptile",parent=chordate)
mammal=Node("mammal",parent=chordate)
amphibian=Node("amphibian",parent=chordate)
bird=Node("bird",parent=chordate)
fish=Node("fish",parent=chordate)
animal_material=Node("animal material",parent=material)
food=Node("food",parent=substance)
vehicle=Node("vehicle",parent=conveyance)
device=Node("device",parent=instrumentality)
instrument=Node("instrument",parent=instrumentality)
musical_instrument=Node("musical instrument",parent=instrument)
measuring_instrument=Node("measuring instrument",parent=instrument)

"""Print out the layout of the Tree"""

for pre, fill, node in RenderTree(entity):
  print("%s%s" % (pre, node.name))